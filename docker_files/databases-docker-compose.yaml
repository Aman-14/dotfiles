services:
  mongo1:
    image: mongo
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: |
        mongosh --host localhost --port 27017 --eval '
          // Function to check and update the replica set configuration
          function checkAndUpdateReplicaSet() {
            let rsStatus = rs.status();
            let desiredHost = "docker.home.server:27017";
            print("Replica set configuration:");
            printjson(rsStatus);
            print("Desired host: " + desiredHost);

            // Check if the desired host is in the replica set configuration
            let members = rsStatus.members.map(function(m) { return m.name; });
            let containsDesiredHost = members.indexOf(desiredHost) !== -1;

            if (!containsDesiredHost) {
              print("Updating replica set configuration to include " + desiredHost);
              let cfg = rs.conf();
              cfg.members[0].host = desiredHost;
              rs.reconfig(cfg, { force: true });
            }
          }

          // Run the check and update function
          checkAndUpdateReplicaSet();
        ' --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 50
    volumes:
      - $HOME/docker_volumes/mongo/data/db:/data/db
    restart: always
  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - $HOME/docker_volumes/redis/data:/data
    restart: always
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: aman
      POSTGRES_PASSWORD: aman
    ports:
      - "5432:5432"
    volumes:
      - $HOME/docker_volumes/postgres/data:/var/lib/postgresql/data
    restart: always
